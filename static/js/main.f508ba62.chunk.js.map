{"version":3,"sources":["Questionnaire.js","App.js","serviceWorker.js","index.js"],"names":["secondHalves","firstNames","map","item","MenuItem","value","Questionnaire","props","validate","firstName","gender","state","secondName","_","sample","nonLeen","isEqual","includes","handleGenderChange","event","target","setState","headerColor","handleNameChange","resetEverything","newName","showName","showNewName","this","className","style","background","FormControl","InputLabel","Select","labelId","id","onChange","Button","variant","color","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f508ba62.chunk.js","sourcesContent":["import React from 'react';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport _ from 'lodash';\nimport './App.css';\n\nconst halves = ['Raman', 'Kamal', 'Aman', 'Jas', 'Simran', 'Gur', 'Har', 'Man', 'Bal', 'Nav', 'Sukh', 'Kul', 'Prabh', 'Tar'];\nconst secondHalves = ['preet', 'meet', 'leen', 'jot', 'winder', 'jeet', 'deep'];\n\nlet firstNames = halves.map((item) =>\n    <MenuItem value={item}>{item}</MenuItem>\n);\n\nexport class Questionnaire extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gender: '',\n            firstName: '',\n            newName: '',\n            showName: false,\n            headerColor: 'green'\n        }\n    }\n\n    validate = (firstName) => {\n        const gender = this.state.gender;\n        let secondName = _.sample(secondHalves);\n        const nonLeen = ['Jas', 'Gur', 'Har', 'Man', 'Prabh'];\n        while (_.isEqual(secondName, 'leen') && !_.includes(nonLeen, firstName)) {\n           secondName = _.sample(secondHalves);\n        }\n        const lastName = _.isEqual(gender, 'Boy') ? 'Singh' : 'Kaur';\n        return firstName + secondName + ' ' + lastName;\n    };\n\n    handleGenderChange = (event) => {\n        const gender = event.target.value;\n        if (_.isEqual(gender, 'Boy')) {\n            this.setState({headerColor: '#3b5998'})\n        } else {\n            this.setState({headerColor: '#ff42a4'})\n        }\n        this.setState({gender: event.target.value});\n    };\n\n    handleNameChange = (event) => {\n        this.setState({firstName: event.target.value});\n    };\n\n    resetEverything = () => {\n        this.setState({gender: '', firstName: '', newName: '', showName: false});\n    };\n\n    showNewName = () => {\n        this.setState({showName: true});\n        const newName = this.validate(this.state.firstName);\n        this.setState({newName: newName});\n    };\n\n    render() {\n        const gender = this.state.gender;\n        const firstName = this.state.firstName;\n        return (\n        <div>\n            <div className='Title' style={{background: this.state.headerColor}}>\n                    Sikh Name\n                </div>\n            <div>\n                <div className='gender-ddl'>\n                        <FormControl className='formControlGender'>\n                         <InputLabel>Gender</InputLabel>\n                         <Select\n                             labelId='gender'\n                             id='gender'\n                             value={gender}\n                             onChange={this.handleGenderChange}\n                         >\n                             autoWidth\n                             <MenuItem value={'Boy'}>Boy</MenuItem>\n                             <MenuItem value={'Girl'}>Girl</MenuItem>\n                         </Select>\n                     </FormControl>\n                 </div>\n                 { this.state.gender &&\n                     <div className='ResultBody'>\n                         <FormControl className='formControlPicker'>\n                             <InputLabel>First</InputLabel>\n                             <Select\n                                 labelId='firstName'\n                                 id='firstName'\n                                 value={firstName}\n                                 onChange={this.handleNameChange}\n                             >\n                                 {firstNames}\n                             </Select>\n                         </FormControl>\n                     </div>\n                 }\n                 { this.state.gender && this.state.firstName &&\n                     <div className='result'>\n                         <div className='find-results'>\n                             <Button className='primary-btn' variant=\"contained\" color=\"primary\" onClick={this.showNewName}>\n                                 Get Name\n                             </Button>\n                         </div>\n                         <div className='reset-results'>\n                             <Button variant=\"contained\" color=\"secondary\" onClick={this.resetEverything}>\n                                 Reset\n                             </Button>\n                         </div>\n                     </div>\n                 }\n                 { this.state.showName &&\n                    <div className='final-result'>\n                        {this.state.newName}\n                    </div>\n                 }\n                 </div>\n            </div>\n        )}\n    }\nexport default Questionnaire;","import React from 'react';\nimport './App.css';\nimport Questionnaire from './Questionnaire';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n          <Questionnaire/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}